pipeline {
    agent {
        label 'agent-ssh-jenkins-1-general'
    }
    stages {
        stage('1. Descargar repositorio y crear reports.') {
            steps {
                echo 'Descargando repostorio...'
                checkout scm
                sh 'ls -la'
                echo 'Creando directorio de reportes...'
                sh 'mkdir -p reports'
            }
        }
        stage('2. Pruebas unitarias (Secuencial).') {
            steps {
                echo 'Realizando pruebas unitarias...'
                sh 'python3 -m pytest test/unit --junitxml=reports/TEST-unit-sequential.xml'
                echo 'Pruebas unitarias (secuenciales) realizadas con éxito'
            }
        }
        stage('3. Pruebas de servicio (Secuencial con aislamiento).') {
            steps {
                script {
                    echo 'Iniciando pruebas de servicio secuencial...'
                    def FLASK_HOST_PORT_SEQ = ''
                    def WIREMOCK_HOST_PORT_SEQ = ''
                    try {
                        echo 'Limpiando entorno en caso de ser necesario...'
                        sh 'docker compose -f docker-compose.yml down --volumes --remove-orphans || true'

                        sh 'echo "DEBUG: Verificando directorio de mappings de WireMock en el workspace..."'
                        sh 'ls -la ./test/wiremock/mappings/' // Muestra el contenido del directorio
                        sh 'echo "DEBUG: Contenido de ./test/wiremock/mappings/sqrt64.json:"'
                        
                        sh 'cat ./test/wiremock/mappings/sqrt64.json || echo "ERROR: sqrt64.json no encontrado o cat falló"'
                        echo 'Construyendo entorno para pruebas python-app y wiremock (CON PUBLICACIÓN DE PUERTOS)...'
                        sh 'docker compose -f docker-compose.yml up -d --build python-app wiremock_service'

                        echo 'Esperando a que los servicios se inicien...'
                        sh 'sleep 10' 
                        sh 'docker compose -f docker-compose.yml logs python-app' 
                        sh 'docker compose -f docker-compose.yml exec python-app env'
                        sh 'docker compose -f docker-compose.yml logs wiremock_service'

                        FLASK_HOST_PORT_SEQ = sh(script: 'docker compose -f docker-compose.yml port python-app 5000', returnStdout: true).trim().split(':')[1]
                        WIREMOCK_HOST_PORT_SEQ = sh(script: 'docker compose -f docker-compose.yml port wiremock_service 8080', returnStdout: true).trim().split(':')[1]

                        echo "DEBUG: FLASK_HOST_PORT_SEQ detectado: ${FLASK_HOST_PORT_SEQ}"
                        echo "DEBUG: WIREMOCK_HOST_PORT_SEQ detectado: ${WIREMOCK_HOST_PORT_SEQ}"

                        // Construye las URLs usando host.docker.internal
                        def flaskUrlForTestSeq = "http://host.docker.internal:${FLASK_HOST_PORT_SEQ}"
                        def wiremockUrlForTestSeq = "http://host.docker.internal:${WIREMOCK_HOST_PORT_SEQ}"

                        echo "DEBUG: Intentando curl a python-app en ${flaskUrlForTestSeq}/calc/add/1/2"
                        sh "curl -v --connect-timeout 10 ${flaskUrlForTestSeq}/calc/add/1/2 || echo 'Curl a python-app falló'"

                        echo "DEBUG: Intentando curl a wiremock en ${wiremockUrlForTestSeq}/__admin/mappings"
                        sh "curl -v --connect-timeout 10 ${wiremockUrlForTestSeq}/__admin/mappings || echo 'Curl a wiremock falló'"

                        echo 'Creando directorio para reportes en el workspace...'
                        sh 'mkdir -p reports'
                        
                        echo 'Ejecutando pruebas de servicio (Secuencial)...'
                        sh """
                            FLASK_TEST_URL="${flaskUrlForTestSeq}" \
                            WIREMOCK_TEST_URL="${wiremockUrlForTestSeq}" \
                            python3 -m pytest test/rest --junitxml=reports/TEST-rest-sequential.xml
                        """
                        
                        echo 'Pruebas de servicio secuencial ejecutadas con éxito.'
                    } finally {
                        echo 'Deteniendo y eliminando contenedores de prueba (service secuencial) para un workspace limpio...'
                        sh 'docker compose -f docker-compose.yml down --volumes --remove-orphans || true'
                    }
                }
            }
        }
        stage('4. Pruebas en paralelo (Con aislamiento)') {
            parallel {
                stage('4.1 Pruebas unitarias (Paralelo)') {
                    steps {
                        echo 'Creando directorio para reportes en el workspace...'
                        sh 'mkdir -p reports'

                        echo 'Realizando pruebas unitarias en paralelo...'
                        sh 'python3 -m pytest test/unit --junitxml=reports/TEST-unit-parallel.xml' 
                        
                        echo 'Pruebas unitarias realizadas con exito...'
                    }
                }
                stage('4.2 Pruebas de servicio (Paralelo con aislamiento)') {
                    steps {
                        script {
                            echo 'Iniciando pruebas de servicio en paralelo'
                            def FLASK_HOST_PORT_PAR = ''
                            def WIREMOCK_HOST_PORT_PAR = ''
                            try {
                                echo 'Limpiando entorno en caso de ser necesario...'
                                sh 'docker compose -f docker-compose.yml down --volumes --remove-orphans || true'

                                echo 'Construyendo entorno para pruebas python-app y wiremock (CON PUBLICACIÓN DE PUERTOS)...'
                                sh 'docker compose -f docker-compose.yml up -d --build python-app wiremock_service'

                                echo 'Esperando a que los servicios se inicien...'
                                sh 'sleep 10' 
                                sh 'docker compose -f docker-compose.yml logs python-app'
                                sh 'docker compose -f docker-compose.yml exec python-app env'
                                sh 'docker compose -f docker-compose.yml logs wiremock_service'

                                FLASK_HOST_PORT_PAR = sh(script: 'docker compose -f docker-compose.yml port python-app 5000', returnStdout: true).trim().split(':')[1]
                                WIREMOCK_HOST_PORT_PAR = sh(script: 'docker compose -f docker-compose.yml port wiremock_service 8080', returnStdout: true).trim().split(':')[1]
                                
                                echo "DEBUG: FLASK_HOST_PORT_PAR detectado: ${FLASK_HOST_PORT_PAR}"
                                echo "DEBUG: WIREMOCK_HOST_PORT_PAR detectado: ${WIREMOCK_HOST_PORT_PAR}"

                                // Construye las URLs usando host.docker.internal
                                def flaskUrlForTestPar = "http://host.docker.internal:${FLASK_HOST_PORT_PAR}"
                                def wiremockUrlForTestPar = "http://host.docker.internal:${WIREMOCK_HOST_PORT_PAR}"

                                echo 'Creando directorio para reportes en el workspace...'
                                sh 'mkdir -p reports'
                                
                                echo 'Ejecutando pruebas de servicio (Parallel)...'
                                // Añadí los echos de debug con curl aquí también por consistencia
                                echo "DEBUG: (Paralelo) Intentando curl a python-app en ${flaskUrlForTestPar}/calc/add/1/2"
                                sh "curl -v --connect-timeout 10 ${flaskUrlForTestPar}/calc/add/1/2 || echo '(Paralelo) Curl a python-app falló'"

                                echo "DEBUG: (Paralelo) Intentando curl a wiremock en ${wiremockUrlForTestPar}/__admin/mappings"
                                sh "curl -v --connect-timeout 10 ${wiremockUrlForTestPar}/__admin/mappings || echo '(Paralelo) Curl a wiremock falló'"
                                
                                sh """
                                    FLASK_TEST_URL="${flaskUrlForTestPar}" \
                                    WIREMOCK_TEST_URL="${wiremockUrlForTestPar}" \
                                    python3 -m pytest test/rest --junitxml=reports/TEST-rest-parallel.xml
                                """
                                echo 'Pruebas de servicio en paralelo ejecutadas con éxito.'
                            } finally {
                                echo 'Deteniendo y eliminando contenedores de prueba (service parallel) para un workspace limpio...'
                                sh 'docker compose -f docker-compose.yml down --volumes --remove-orphans || true'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Fin del Pipeline'
            archiveArtifacts artifacts: 'reports/*.xml', allowEmptyArchive: true
        }
        failure {
            echo 'El pipeline falló.'
        }
    }
}